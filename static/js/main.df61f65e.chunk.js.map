{"version":3,"sources":["modules/CountdownTimer/components/CountDown.tsx","modules/CountdownTimer/index.tsx","Navigation.tsx","context/Modals.tsx","configs/ethereum.ts","configs/goerli.ts","config.ts","protocol/Protocol.tsx","state/chains/actions.ts","context/ProtocolProvider.tsx","state/application/actions.ts","state/application/reducer.ts","state/transactions/actions.ts","state/transactions/reducer.ts","state/chains/reducer.ts","state/index.ts","hooks/useIsWindowVisible.ts","App.tsx","state/Updaters.tsx","reportWebVitals.ts","index.tsx"],"names":["CountDown","revealDate","Date","getTime","className","date","renderer","days","hours","minutes","seconds","String","length","Countdown","id","href","Navigation","CountdownTimer","styled","div","configurations","networkName","networkDisplayName","networkIconName","chainId","etherscanUrl","defaultProvider","deployments","require","refreshInterval","gasLimitMultiplier","blockchainToken","blockchainTokenName","blockchainTokenDecimals","networkSetupDocLink","supportedTokens","decimalOverrides","USDC","isProduction","process","REACT_APP_ISPROD","ethereum","goerli","goerliChain","mainnet","updateChainId","createAction","updateBlockNumber","toggleWalletModal","toggleSettingsMenu","addPopup","removePopup","createReducer","blockNumber","popupList","walletModalOpen","settingsMenuOpen","builder","addCase","state","action","payload","Math","max","content","key","removeAfterMs","filter","popup","concat","nanoid","show","forEach","p","addTransaction","clearAllTransactions","finalizeTransaction","checkedTransaction","now","transactions","from","hash","approval","summary","Error","txs","addedTime","tx","lastCheckedBlockNumber","receipt","confirmedTime","active","chainsConfig","PERSISTED_KEYS","store","configureStore","reducer","application","chains","middleware","getDefaultMiddleware","save","states","preloadedState","load","document","Providers","children","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.df61f65e.chunk.js","sourcesContent":["import React from \"react\";\nimport Countdown from \"react-countdown\";\n\nconst CountDown = () => {\n  const revealDate = new Date(\"Feb 16, 2023 15:00:00 UTC\").getTime();\n  return (\n    <div>\n      < p className={'reveal-text'} > Website reveal in</p >\n\n      <br />\n      {\n        < Countdown\n          date={revealDate}\n          renderer={({ days, hours, minutes, seconds }) => {\n            return (\n              <div className=\"countdown-internal\">\n                <div className={'number-container'}>\n                  <div className={'number'}>\n                    <span>{String(days).length === 1 ? `0${String(days)}` : String(days)}</span>\n                  </div>\n                  <span className={'text'}>{\"Days\"}</span>\n                </div>\n                <div className={'divider'}>\n                  <span>{\":\"}</span>\n                </div>\n                <div className={'number-container'}>\n                  <div className={'number'}>\n                    <span>{String(hours).length === 1 ? `0${String(hours)}` : String(hours)}</span>\n                  </div>\n                  <span className={'text'}>{\"Hours\"}</span>\n                </div>\n                <div className={'divider'}>\n                  <span>{\":\"}</span>\n                </div>\n                <div className={'number-container'}>\n                  <div className={'number'}>\n                    <span>{String(minutes).length === 1 ? `0${String(minutes)}` : String(minutes)}</span>\n                  </div>\n                  <span className={'text'}>{\"Minutes\"}</span>\n                </div>\n                <div className={'divider'}>\n                  <span>{\":\"}</span>\n                </div>\n                <div className={'number-container'}>\n                  <div className={'number'}>\n                    <span>{String(seconds).length === 1 ? `0${String(seconds)}` : String(seconds)}</span>\n                  </div>\n                  <span className={'text'}>{\"Seconds\"}</span>\n                </div>\n              </div>\n            )\n          }}\n        />\n      }\n      <br /><br />\n    </div >\n  )\n}\n\nexport default CountDown;\n","import React from \"react\";\nimport CountDown from \"./components/CountDown\";\n\nimport \"./styles/IndexFaq.css\"\nimport './styles/index.css';\n\nconst Countdown = () => {\n  return (\n    <div id=\"countdown\">\n      <CountDown />\n      <h1>A mission. A journey. An Adventure.</h1><br />\n      <p>One may not know which way to go. On this dark road.</p><br />\n      <p>Show the light and they shall follow!</p>\n      <a className=\"discord\" href=\"https://discord.gg/mahadao\">Join the Discord</a>\n    </div>\n  )\n}\n\nexport default Countdown\n","import CountdownTimer from './modules/CountdownTimer'\n\nfunction Navigation() {\n  return (\n    <CountdownTimer />\n  )\n}\n\nexport default Navigation;\n","import styled from 'styled-components'\nimport React, {createContext, useCallback, useState} from 'react';\n\nimport {ModalsContext} from '../utils/interface';\n\nexport const Context = createContext<ModalsContext>({\n  onPresent: () => {\n  },\n  onDismiss: () => {\n  },\n})\n\n//@ts-ignore\nconst Modals = ({children}) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [content, setContent] = useState<React.ReactNode>()\n\n  const handlePresent = useCallback((modalContent: React.ReactNode) => {\n    setContent(modalContent)\n    setIsOpen(true)\n  }, [setContent, setIsOpen])\n\n  const handleDismiss = useCallback(() => {\n    setContent(undefined)\n    setIsOpen(false)\n  }, [setContent, setIsOpen])\n\n  return (\n    <Context.Provider value={{\n      content,\n      isOpen,\n      onPresent: handlePresent,\n      onDismiss: handleDismiss,\n    }}>\n      {children}\n      {isOpen && (\n        <StyledModalWrapper>\n          <StyledModalBackdrop onClick={handleDismiss}/>\n          {React.isValidElement(content) && React.cloneElement(content, {\n            //@ts-ignore\n            onDismiss: handleDismiss,\n          })}\n        </StyledModalWrapper>\n      )}\n    </Context.Provider>\n  )\n}\n\nconst StyledModalWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  position: fixed;\n  top: 0; right: 0; bottom: 0; left: 0;\n`;\n\nconst StyledModalBackdrop = styled.div`\n  background-color: #00000088;\n  position: absolute;\n  top: 0; right: 0; bottom: 0; left: 0;\n`;\n\nexport default Modals;\n","import {Configuration} from \"../utils/interface\";\n\nconst configurations: { [env: string]: Configuration } = {\n  1: {\n    networkName: \"Ethereum\",\n    networkDisplayName: \"Ethereum\",\n    networkIconName: \"Ethereum\",\n    chainId: 1,\n    etherscanUrl: \"https://etherscan.io\",\n    defaultProvider:\n      \"https://mainnet.infura.io/v3/3a9a6018905e45669f505505420d81d6\",\n    deployments: require(\"../protocol/deployments/ethereum.json\"),\n    refreshInterval: 10000,\n    gasLimitMultiplier: 1.1,\n    blockchainToken: \"ETH\",\n    blockchainTokenName: \"ETH\",\n    blockchainTokenDecimals: 18,\n    networkSetupDocLink:\n      \"https://docs.polygon.technology/docs/develop/metamask/config-polygon-on-metamask/\",\n    supportedTokens: [\"MAHA\", \"ETH\", \"ARTH\"],\n    decimalOverrides: {\n      USDC: 6,\n    },\n\n  },\n};\n\nexport default configurations;\n","import { Configuration } from \"../utils/interface\";\n\nconst configurations: { [env: string]: Configuration } = {\n  5: {\n    networkName: \"Goerli\",\n    networkDisplayName: \"Goerli\",\n    networkIconName: \"Goerli\",\n    chainId: 5,\n    etherscanUrl: \"https://goerli.etherscan.io\",\n    defaultProvider:\n      \"https://goerli.infura.io/v3/3a9a6018905e45669f505505420d81d6\",\n    deployments: require(\"../protocol/deployments/goerli.json\"),\n    refreshInterval: 10000,\n    gasLimitMultiplier: 1.1,\n    blockchainToken: \"ETH\",\n    blockchainTokenName: \"ETH\",\n    blockchainTokenDecimals: 18,\n    networkSetupDocLink:\n      \"https://docs.polygon.technology/docs/develop/metamask/config-polygon-on-metamask/\",\n    supportedTokens: [\"MAHA\", \"ARTH\", \"ETH\"],\n    decimalOverrides: {},\n  },\n};\n\nexport default configurations;\n","import {goerli as goerliChain, mainnet} from '@wagmi/core/chains'\nimport ethereum from './configs/ethereum';\nimport goerli from './configs/goerli';\nimport { Configuration } from './utils/interface'\n\nexport const isProduction = process.env.REACT_APP_ISPROD === 'true';\n\nconst configurations: {[env: string]: Configuration} = {\n    ...ethereum,\n    ...goerli\n}\n\nexport let ConfigChains = [goerliChain, mainnet];\n\nif (isProduction) {\n    delete configurations[5];\n    ConfigChains = [mainnet]\n}\nexport default configurations;\n\nexport const getSupportedChains = (): number[] =>\n  Object.keys(configurations).map((i) => Number(i));\n\nexport const getChainsRpc = (): object => {\n    var returnObj = {};\n    Object.entries(configurations).map(\n        // @ts-ignore\n        ([k, d]) => (returnObj[k] = d.defaultProvider)\n    );\n    return returnObj;\n};","import {BigNumber, Contract, ethers, Overrides} from \"ethers\";\nimport Web3 from 'web3'\nimport { Configuration } from \"../utils/interface\";\nimport ERC20 from \"./ERC20\";\nimport {getDefaultProvider} from \"../utils/provider\";\nimport ABIS from \"./deployments/abi\";\n\nexport class Protocol {\n  myAccount!: string\n  web3!: Web3\n  _signer?: ethers.Signer\n  _config!: {\n    [chainId: number]: Configuration;\n  };\n  _contracts!: {\n    [chainId: number]: {[name: string]: Contract}\n  }\n  provider!: ethers.providers.BaseProvider\n  _tokens!: {\n    [chainId: number]: { [name: string]: ERC20 };\n  };\n  _activeNetwork!: number;\n\n  constructor(cfg: { [chainId: number]: Configuration }, chainId: number) {\n    this._activeNetwork = chainId;\n    this._contracts = {};\n    this._tokens = {};\n    this._tokens = {};\n\n    try {\n      for (const [chainIdString, config] of Object.entries(cfg)) {\n        const chainId = Number(chainIdString);\n        const {deployments} = config;\n        this.provider = getDefaultProvider(config);\n        const networkConfig: { [name: string]: Contract } = {};\n        const tokens: { [name: string]: ERC20 } = {};\n\n        for (const [name, deployment] of Object.entries(deployments)) {\n          if (!deployment.abi) continue;\n          //to push all erc20 tokens in tokens array\n          if (cfg[chainId].supportedTokens.includes(name)) {\n            tokens[name] = new ERC20(\n              deployments[name].address,\n              this.provider,\n              name,\n              cfg[chainId].decimalOverrides[name] || 18\n            );\n          }\n          // to push all others as contracts\n          networkConfig[name] = new Contract(\n            deployment.address,\n            ABIS[deployment.abi],\n            this.provider\n          );\n        }\n\n        this._contracts[chainId] = networkConfig;\n        this._tokens[chainId] = tokens;\n      }\n    } catch (e) {\n      console.log(\"Error in contracts mapping\", e);\n    }\n\n    this._config = cfg;\n  }\n\n  get isUnlocked(): boolean {\n    return !!this.myAccount;\n  }\n\n   /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n    unlockWallet(provider: any, account: string) {\n        // @ts-ignore\n        const newProvider = new ethers.providers.Web3Provider(provider);\n        this.web3 = new Web3(provider);\n        this.provider = newProvider;\n        this._signer = newProvider.getSigner(0);\n        this.myAccount = account;\n    \n        for (const [chainId, contracts] of Object.entries(this._contracts)) {\n          for (const [name, contract] of Object.entries(contracts)) {\n            this._contracts[Number(chainId)][name] = contract.connect(this._signer);\n          }\n        }\n    \n        for (const tokens of Object.values(this._tokens)) {\n          for (const token of Object.values(tokens)) {\n            if (token && token.address) token.connect(this._signer);\n          }\n        }\n      }\n    \n      updateActiveNetwork(chainId: number, dispatch: any) {\n        this._activeNetwork = chainId;\n      }\n\n    gasOptions(gas: BigNumber = BigNumber.from(\"6000000\")): Overrides {\n        const multiplied = Math.floor(\n            gas.toNumber() * this._config[137][\"gasLimitMultiplier\"]\n        );\n        return {\n            gasLimit: BigNumber.from(multiplied),\n        };\n    }\n    getStakingContract(chainId: number): Contract {\n      return this._contracts[chainId][\"MAHAXLocker\"];\n    }\n    getVestingContract(chainId: number): Contract {\n      return this._contracts[chainId][\"MAHAXLocker\"];\n    }\n}\n","import {createAction} from \"@reduxjs/toolkit\"\n\nexport const updateChainId = createAction<{chainId: number}>('app/updateChainId')","import {useWallet} from 'use-wallet';\nimport React, {createContext, useEffect, useState} from 'react';\nimport { useProvider } from 'wagmi'\nimport { useAccount } from 'wagmi'\n\nimport config from '../config';\nimport Protocol from '../protocol';\nimport {useGetActiveChainId} from '../state/chains/hooks';\nimport {useDispatch} from \"react-redux\";\n\nexport interface ProtocolContext {\n  core: Protocol;\n}\n\n// @ts-ignore\nexport const Context = createContext<ProtocolContext>({core: null});\n\ninterface IProps {\n  children: any;\n}\n\nexport const ProtocolProvider = (props: IProps) => {\n  const {children} = props;\n  const chainId = useGetActiveChainId();\n  // const {ethereum} = useWallet();\n  const [core, setCore] = useState<Protocol>();\n  const dispatch = useDispatch();\n  const provider = useProvider()\n  const { address: account } = useAccount()\n\n  // console.log('ethereum', ethereum)\n  useEffect(() => {\n    if (!core && config) {\n      const newCore = new Protocol(config, chainId);\n      if (account) {\n        newCore.unlockWallet(window.ethereum, account);\n      }\n      setCore(newCore);\n    } else if (account && core) {\n      core.unlockWallet(window.ethereum, account);\n    }\n  }, [account, core, dispatch, window.ethereum, chainId]);\n\n  // @ts-ignore\n  return <Context.Provider value={{core}}>{children}</Context.Provider>;\n};\n","import {createAction} from '@reduxjs/toolkit';\n\nimport {PopupContent} from '../../utils/interface';\n\nexport const updateBlockNumber = createAction<{ chainId: number; blockNumber: number }>(\n  'app/updateBlockNumber',\n);\n\nexport const toggleWalletModal = createAction<void>('app/toggleWalletModal');\n\nexport const toggleSettingsMenu = createAction<void>('app/toggleSettingsMenu');\n\nexport const addPopup = createAction<{\n  key?: string;\n  removeAfterMs?: number | null;\n  content: PopupContent;\n}>('app/addPopup');\n\nexport const removePopup = createAction<{ key: string }>('app/removePopup');\n","import {createReducer, nanoid} from '@reduxjs/toolkit';\nimport { ApplicationState } from '../../utils/interface';\n\nimport {addPopup, removePopup, toggleSettingsMenu, toggleWalletModal, updateBlockNumber,} from './actions';\n// import {INITIAL_APP_STATE} from '../../utils/constants';\n\nexport const INITIAL_APP_STATE: ApplicationState = {\n  blockNumber: {},\n  popupList: [],\n  walletModalOpen: false,\n  settingsMenuOpen: false,\n};\n\nexport default createReducer(INITIAL_APP_STATE, (builder) =>\n  builder\n    .addCase(updateBlockNumber, (state, action) => {\n      const {chainId, blockNumber} = action.payload;\n      if (typeof state.blockNumber[chainId] !== 'number') {\n        state.blockNumber[chainId] = blockNumber;\n      } else {\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId]);\n      }\n    })\n    .addCase(toggleWalletModal, (state) => {\n      state.walletModalOpen = !state.walletModalOpen;\n    })\n    .addCase(toggleSettingsMenu, (state) => {\n      state.settingsMenuOpen = !state.settingsMenuOpen;\n    })\n    .addCase(addPopup, (state, {payload: {content, key, removeAfterMs = 15000}}) => {\n      state.popupList = (key\n          ? state.popupList.filter((popup) => popup.key !== key)\n          : state.popupList\n      ).concat([\n        {\n          key: key || nanoid(),\n          show: true,\n          content,\n          removeAfterMs,\n        },\n      ]);\n    })\n    .addCase(removePopup, (state, {payload: {key}}) => {\n      state.popupList.forEach((p) => {\n        if (p.key === key) {\n          p.show = false;\n        }\n      });\n    }),\n);\n","import {createAction} from '@reduxjs/toolkit';\n\nexport interface SerializableTransactionReceipt {\n  to: string;\n  from: string;\n  contractAddress: string;\n  transactionIndex: number;\n  blockHash: string;\n  transactionHash: string;\n  blockNumber: number;\n  status?: number;\n}\n\nexport const addTransaction = createAction<{\n  chainId: number;\n  hash: string;\n  from: string;\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n}>('transactions/addTransaction');\n\nexport const clearAllTransactions = createAction<{ chainId: number }>(\n  'transactions/clearAllTransactions',\n);\n\nexport const finalizeTransaction = createAction<{\n  chainId: number;\n  hash: string;\n  receipt: SerializableTransactionReceipt;\n}>('transactions/finalizeTransaction');\n\nexport const checkedTransaction = createAction<{\n  chainId: number;\n  hash: string;\n  blockNumber: number;\n}>('transactions/checkedTransaction');\n","import {createReducer} from '@reduxjs/toolkit';\n\nimport {\n  addTransaction,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n  SerializableTransactionReceipt,\n} from './actions';\n\nconst now = () => new Date().getTime();\n\nexport interface TransactionDetails {\n  hash: string;\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n  receipt?: SerializableTransactionReceipt;\n  lastCheckedBlockNumber?: number;\n  addedTime: number;\n  confirmedTime?: number;\n  from: string;\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails;\n  };\n}\n\nexport const initialState: TransactionState = {};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(\n      addTransaction,\n      (transactions, {payload: {chainId, from, hash, approval, summary}}) => {\n        if (transactions[chainId]?.[hash]) {\n          throw Error('Attempted to add existing transaction.');\n        }\n        const txs = transactions[chainId] ?? {};\n        txs[hash] = {hash, approval, summary, from, addedTime: now()};\n        transactions[chainId] = txs;\n      },\n    )\n    .addCase(clearAllTransactions, (transactions, {payload: {chainId}}) => {\n      if (!transactions[chainId]) return;\n      transactions[chainId] = {};\n    })\n    .addCase(\n      checkedTransaction,\n      (transactions, {payload: {chainId, hash, blockNumber}}) => {\n        const tx = transactions[chainId]?.[hash];\n        if (!tx) {\n          return;\n        }\n        if (!tx.lastCheckedBlockNumber) {\n          tx.lastCheckedBlockNumber = blockNumber;\n        } else {\n          tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n        }\n      },\n    )\n    .addCase(finalizeTransaction, (transactions, {payload: {hash, chainId, receipt}}) => {\n      const tx = transactions[chainId]?.[hash];\n      if (!tx) {\n        return;\n      }\n      tx.receipt = receipt;\n      tx.confirmedTime = now();\n    }),\n);\n","import { createReducer } from \"@reduxjs/toolkit\"\n\nimport { IChainIdInitialState } from \"../../utils/interface\";\nimport { updateChainId } from \"./actions\"\n\nconst ChainIdInitialState: IChainIdInitialState = {\n    active: 1,\n};\n\nexport default createReducer(ChainIdInitialState, (builder) => \n     builder\n        .addCase(updateChainId, (chainsConfig, {payload: {chainId}}) => {\n            chainsConfig.active = chainId;\n        })\n)\n  ","import {createLogger, logger} from 'redux-logger';\nimport {load, save} from 'redux-localstorage-simple';\nimport {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\n\n// import {isProduction} from \"../analytics/Mixpanel\";\nimport application from './application/reducer';\nimport transactions from './transactions/reducer';\nimport chains from './chains/reducer';\n\nconst PERSISTED_KEYS: string[] = ['transactions', 'slippage'];\n\nconst store = configureStore({\n  reducer: {\n    application,\n    transactions,\n    chains\n  },\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(save({states: PERSISTED_KEYS})),\n  preloadedState: load({states: PERSISTED_KEYS}),\n});\n\nexport default store;\n\nexport type AppState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import {useCallback, useEffect, useState} from 'react';\n\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document;\n\nfunction isWindowVisible() {\n  return !VISIBILITY_STATE_SUPPORTED || document.visibilityState !== 'hidden';\n}\n\n/**\n * Returns whether the window is currently visible to the user.\n */\nexport default function useIsWindowVisible(): boolean {\n  const [focused, setFocused] = useState<boolean>(isWindowVisible());\n  const listener = useCallback(() => {\n    setFocused(isWindowVisible());\n  }, [setFocused]);\n\n  useEffect(() => {\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined;\n\n    document.addEventListener('visibilitychange', listener);\n    return () => {\n      document.removeEventListener('visibilitychange', listener);\n    };\n  }, [listener]);\n\n  return focused;\n}\n","import { Provider } from \"react-redux\";\nimport React, { useEffect } from 'react';\nimport { SnackbarProvider } from \"notistack\";\nimport { useWallet, UseWalletProvider } from 'use-wallet';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport './index.css';\n\n// import Popups from \"./components/Popups\";\n\nimport Navigation from './Navigation';\nimport ModalsProvider from './context/Modals';\nimport { ProtocolProvider } from './context/ProtocolProvider';\n\nimport store from \"./state\";\nimport { ConfigChains, getChainsRpc, getSupportedChains } from './config';\nimport useCore from \"./hooks/useCore\";\nimport Updaters from \"./state/Updaters\";\n\nimport { useGetUpdateActiveChainId } from \"./state/chains/hooks\";\nimport \"@rainbow-me/rainbowkit/styles.css\";\nimport {\n  getDefaultWallets,\n  RainbowKitProvider,\n} from \"@rainbow-me/rainbowkit\";\nimport { chain, configureChains, createClient, WagmiConfig } from \"wagmi\";\nimport { alchemyProvider } from 'wagmi/providers/alchemy';\nimport Aos from \"aos\";\n\nconst isProduction = process.env.REACT_APP_ISPROD\n\n//@ts-ignore\nconst Providers = ({ children }) => {\n  return (\n\n    <Provider store={store}>\n      {children}\n    </Provider>\n\n  );\n};\n//@ts-ignore\nconst WalletProvider = ({ children }) => {\n  return (\n    <UseWalletProvider\n      autoConnect={true}\n      connectors={{\n        injected: {\n          chainId: getSupportedChains(),\n        },\n\n        // walletconnect: {\n        //   chainId: getSupportedChains(),\n        //   bridge: 'https://bridge.walletconnect.org',\n        //   pollingInterval: 12000,\n        //   rpc: { ...getChainsRpc() },\n        // },\n      }}\n\n    >\n      <Updaters />\n      <ProtocolProvider>\n        {\n          //@ts-ignore\n        }<AppContent>{children}</AppContent>\n      </ProtocolProvider>\n    </UseWalletProvider>\n  );\n};\n//@ts-ignore\nconst RainbowProvider = ({ children }) => {\n  const { chains, provider } = configureChains(\n    ConfigChains,\n    [\n      alchemyProvider({ apiKey: process.env.REACT_APP_ALCHEMY_ETH_API_KEY }),\n      // publicProvider()\n    ]\n  );\n\n  const { connectors } = getDefaultWallets({\n    appName: \"MahaDAO NFT\",\n    chains,\n  });\n\n  const wagmiClient = createClient({\n    autoConnect: true,\n    connectors,\n    provider,\n  });\n\n  return (\n    <WagmiConfig client={wagmiClient}>\n      <RainbowKitProvider\n        chains={chains}\n        showRecentTransactions={true}\n      >\n        {children}\n      </RainbowKitProvider>\n    </WagmiConfig>\n  );\n};\n\n//@ts-ignore\nconst AppContent = ({ children }) => {\n  const core = useCore();\n  console.log(\"core\", core)\n  const { ethereum } = useWallet();\n  const setChainId = useGetUpdateActiveChainId();\n\n  useEffect(() => {\n    if (ethereum)\n      // @ts-ignore\n      ethereum.on('chainChanged', (chainId) => {\n        console.log('chain changed', chainId);\n        setChainId(chainId);\n      });\n  }, [ethereum]);\n\n  if (!core) return <div />;\n\n  return (\n    <ModalsProvider>\n      <SnackbarProvider\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        maxSnack={2}\n        autoHideDuration={2500}\n      >\n        <>\n          {/* <Popups /> */}\n          {children}\n        </>\n      </SnackbarProvider>\n    </ModalsProvider>\n  );\n};\n\nexport let isMobileGlobal = false;\n\nconst App = () => {\n  return (\n    //@ts-ignore\n    <Providers>\n      <Router>\n        <Navigation />\n      </Router>\n    </Providers>\n  );\n};\n\nexport default App;\n\n// if (isProduction) console.log = function () { };\n","import React from 'react'\nimport ApplicationUpdater from \"./application/updater\"\nimport TransactionUpdater from \"./transactions/updater\"\n\nconst Updaters = () => (\n    <>\n      <ApplicationUpdater/>\n      <TransactionUpdater />\n    </>\n  );\n  \n  export default Updaters;","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App></App>, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}